(env)

(+ 3 5)

(and #t #f)

(and #f #f)

(or #f #t)

(or #f #f)

(if (and #t #f) 3 4)

(if (or #t #f) 3 4)

(setq x 3)

(env)

(+ x 7)

(apply pair (list 3 4))

(pair 5 6)

(setq x (lambda (y) (+ y 1)))

(x 10)

(defun x (y) (+ y 1))

(x 10)

(defun f (x)
  (if (< x 2)
      1
      (g (- x 1))))

(defun g (x)
  (if (< x 2)
      3
      (f (- x 2))))

(f 10)

(g 10)

(f (g 10))

(let ((x 10)
      (y 20))
  (+ x y))

(let* ((x 10)
       (y x))
  (+ x y))

(letrec ((f (lambda (x) (g (+ x 1))))
         (g (lambda (x) (+ x 3))))                                                                       
  (f 0))
